from flask import Flask, render_template, request, redirect, url_for, session, flash
import json
from datetime import datetime

app = Flask(__name__)

app.secret_key = 'ethan'

# Load user file to validate the login page
def load_users():
    with open('user.json') as user_file:
        users = json.load(user_file)
    return users["users"]

# Home page
@app.route("/")
def home():
    global question_num, start_time, user_responses
    question_num = 0
    start_time = datetime.now()
    user_responses = {}
    return render_template('home.html')

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    global username, password
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        users = load_users()
        print(username, password)
        for user in users:
            if user['username'] == username and user['password'] == password:
                session['username'] = username
                return redirect(url_for('home'))
    return render_template('login.html')

# Logout route
@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('home'))

# Quiz route
@app.route('/quiz', methods=['GET', 'POST'])
def quiz():
    if 'username' not in session:
        return redirect(url_for('login'))
    else:
        global question_num, hint, user_responses
        result = None
        hint = None

        if request.method == 'POST':
            if request.form.get("action") == 'hint':
                hint = question_list[question_num].get("hint", "No hint available")
            elif request.form.get('next'):
                question_num += 1
                if question_num >= len(question_list):
                    print("User Responses at end of quiz:", user_responses)  # Debugging print statement
                    return redirect(url_for('result'))
            else:
                user_answer = request.form.get("answer")
                user_responses[question_list[question_num]["question"]] = user_answer
                print("Updated User Responses:", user_responses)  # Debugging print statement
                question_num += 1
                if question_num >= len(question_list):
                    print("User Responses at end of quiz:", user_responses)  # Debugging print statement
                    return redirect(url_for('result'))
        progress = (question_num + 1) / len(question_list) * 100
    return render_template('quiz.html', num=question_num + 1,
                           question=question_list[question_num]["question"],
                           options=question_list[question_num]["options"],
                           result=result, hint=hint, progress=progress)

def recommend_movies(user_responses, movies):
    genre = user_responses.get('What genre of movie do you like?').lower()
    platform = user_responses.get('Which platform do you prefer to watch movies on?').lower()
    rating = user_responses.get('Do you have a preferred movie rating?').upper()
    actors = [actor.lower() for actor in user_responses.get('Which actors do you like? (choose at least one)', [])]
    director = user_responses.get('Do you have a favorite director?').lower()
    country = user_responses.get('Do you have a preferred country of origin for movies?').lower()
    recommended_movies = []

    for genre_key, movie_list in movies["movies"].items():
        print(f"Checking genre: {genre_key.lower()} against user genre: {genre}")
        if genre and genre != genre_key.lower():
            print(f"Skipping genre {genre_key.lower()} because it does not match user preference {genre}")
            continue
        for movie in movie_list:
            print(f"Evaluating movie: {movie['title']}")
            if platform and platform.lower() not in [p.lower() for p in movie["platform"]]:
                print(f"Skipping movie {movie['title']} because platform {movie['platform']} does not match user preference {platform}")
                continue
            if rating and movie["rating"].upper() != rating:
                print(f"Skipping movie {movie['title']} because rating {movie['rating']} does not match user preference {rating}")
                continue
            if actors and not any(actor.lower() in [a.lower() for a in movie["actors"]] for actor in actors):
                print(f"Skipping movie {movie['title']} because actors {movie['actors']} do not match user preference {actors}")
                continue
            if director and movie["director"].lower() != director:
                print(f"Skipping movie {movie['title']} because director {movie['director']} does not match user preference {director}")
                continue
            if country and movie["country"].lower() != country:
                print(f"Skipping movie {movie['title']} because country {movie['country']} does not match user preference {country}")
                continue
            print(f"Adding movie {movie['title']} to recommendations")
            recommended_movies.append(movie)

    print("Recommended Movies:", recommended_movies)  # Debugging print statement
    return recommended_movies

@app.route('/result')
def result():
    if 'username' not in session:
        return redirect(url_for('login'))
    
    with open('movies.json') as movies_file:
        movies = json.load(movies_file)
    
    recommendations = recommend_movies(user_responses, movies)
    print("Final User Responses:", user_responses)  # Debugging print statement
    print("recomendations passed to template:", recommendations)

    return render_template('result.html', recommendations=recommendations)

# Convert questions.json into a list of questions
with open("questions.json") as question_file:
    question_list = json.load(question_file)["questions"]

# Create some housekeeping variables
question_num = 0
user_responses = {}

# Run the application
if __name__ == "__main__":
    app.run(debug=True)


def recommend_movies(user_responses, movies):
    user_genre = user_responses.get('What genre of movie do you like?').lower()
    user_platform = user_responses.get('Which platform do you prefer to watch movies on?').lower()
    user_rating = user_responses.get('Do you have a preferred movie rating?').upper()
    user_actors = [actor.lower().strip() for actor in user_responses.get('Which actors do you like? (choose at least one)', "").split(",")]
    user_director = user_responses.get('Do you have a favorite director?', "").lower()
    user_country = user_responses.get('Do you have a preferred country of origin for movies?', "").lower()
    recommended_movies = []

    for genre, movie_list in movies["movies"]["genres"].items():
        if user_genre == genre.lower():
            print(f"Genre match found: {genre}")  # Debugging
            for movie in movie_list:
                print(f"Evaluating movie: {movie['title']}")  # Debugging
                if user_platform and user_platform not in [p.lower() for p in movie["platform"]]:
                    print(f"Skipping movie {movie['title']} because platform {movie['platform']} does not match user preference {user_platform}")  # Debugging
                    continue
                if user_rating and movie["rating"].upper() != user_rating:
                    print(f"Skipping movie {movie['title']} because rating {movie['rating']} does not match user preference {user_rating}")  # Debugging
                    continue
                if user_actors and not any(actor in [a.lower() for a in movie["actors"]] for actor in user_actors):
                    print(f"Skipping movie {movie['title']} because actors {movie['actors']} do not match user preference {user_actors}")  # Debugging
                    continue
                if user_director and movie["director"].lower() != user_director:
                    print(f"Skipping movie {movie['title']} because director {movie['director']} does not match user preference {user_director}")  # Debugging
                    continue
                if user_country and movie["country"].lower() != user_country:
                    print(f"Skipping movie {movie['title']} because country {movie['country']} does not match user preference {user_country}")  # Debugging
                    continue
                print(f"Adding movie {movie['title']} to recommendations")  # Debugging
                recommended_movies.append(movie)

    print("Recommended Movies:", recommended_movies)  # Debugging
    return recommended_movies
